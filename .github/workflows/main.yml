name: CI/CD

on: [push, pull_request]

jobs:
  build:
    name: Compile Assets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Cache javascript packages, see: https://github.com/actions/cache/blob/main/examples.md#node---yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore cached dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install javascript packages
        run: yarn install --silent --ignore-scripts --non-interactive --no-progress

      - name: Compile assets
        run: yarn production

      - name: Persist compiled assets
        uses: actions/upload-artifact@v2
        with:
          name: compiled-assets
          path: |
            public/css
            public/js
            public/mix-manifest.json

  lint:
    name: Lint Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Cache php packages, see: https://github.com/actions/cache/blob/main/examples.md#php---composer
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore cached dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install composer packages
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Lint project
        run: composer test:lint

  deploy:
    name: Deploy Project
    runs-on: ubuntu-latest
    needs:
      - build
      - lint
    if: github.repository == 'iksaku/FIMEats' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore Assets
        uses: actions/download-artifact@v2
        with:
          name: compiled-assets
          path: public/

      # Cache php packages, see: https://github.com/actions/cache/blob/main/examples.md#php---composer
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore cached dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install composer packages
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Deploy
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          SSH_PATH=$HOME/.ssh

          mkdir -p $SSH_PATH
          chmod 700 $SSH_PATH

          touch $SSH_PATH/known_hosts
          chmod 600 $SSH_PATH/known_hosts

          eval $(ssh-agent -s)

          echo "$DEPLOY_KEY" | tr -d '\r' | ssh-add -

          ssh-keyscan -H $DEPLOY_HOST >> $SSH_PATH/known_hosts

          composer exec dep deploy
